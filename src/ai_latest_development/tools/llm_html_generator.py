"""
LLM-Powered HTML Report Generator
Let the LLM generate the complete HTML with styling, charts, and formatting
"""
from __future__ import annotations

import os
from typing import Any, Dict, Optional, Type

from crewai.tools import BaseTool
from pydantic import BaseModel, Field


class LLMHTMLGeneratorInput(BaseModel):
    """Input schema for LLM HTML Generator."""
    report_md_path: str = Field(
        default="report.md", 
        description="Path to the markdown report file"
    )
    output_html_path: str = Field(
        default="mongodb_atlas_report.html",
        description="Path where the HTML report should be saved"
    )


class LLMHTMLGeneratorTool(BaseTool):
    name: str = "llm_html_generator"
    description: str = (
        "Uses LLM to generate a complete, beautiful HTML report from a markdown file. "
        "The LLM creates all HTML, CSS styling, embedded charts (using Chart.js), and formatting. "
        "Provides a fully interactive, professional report with visualizations."
    )
    args_schema: Type[BaseModel] = LLMHTMLGeneratorInput

    def _run(
        self, 
        report_md_path: str = "report.md", 
        output_html_path: str = "mongodb_atlas_report.html"
    ) -> str:
        """Generate HTML report using LLM"""
        
        if not os.path.exists(report_md_path):
            return f"Error: Report file not found: {report_md_path}"
        
        try:
            # Read markdown report
            with open(report_md_path, 'r', encoding='utf-8') as f:
                report_content = f.read()
            
            # Get project info
            project_id = os.getenv('MONGODB_ATLAS_PROJECT_ID', 'N/A')
            
            # LLM will generate the HTML
            # This is handled by the agent's response
            result = {
                "report_content": report_content,
                "project_id": project_id,
                "output_path": output_html_path,
                "instructions": """
Please generate a COMPLETE, beautiful HTML report with the following requirements:

1. **Structure:**
   - DOCTYPE html, full HTML5 structure
   - Embedded CSS in <style> tags (no external CSS files)
   - Embedded JavaScript for interactive charts using Chart.js CDN

2. **Header Section:**
   - Professional gradient background (blue/purple theme)
   - Project title: "MongoDB Atlas AI Ops Analysis Report"
   - Project ID and generation date

3. **Health Dashboard:**
   - 4 score cards in a grid (Overall, Performance, Security, Cost)
   - Each card shows: score out of 100, rating (Excellent/Good/Fair/Poor/Critical)
   - Color-coded backgrounds based on score (green > 75, yellow 60-75, orange 40-60, red < 40)
   - Large, bold numbers for scores

4. **Charts Section (using Chart.js):**
   - Pie chart: Health score breakdown (Performance, Security, Cost)
   - Bar chart: Compliance violations by severity (Critical, High, Medium, Low)
   - Extract these numbers from the report content
   - Use <canvas> elements for charts

5. **Content Sections:**
   - Performance Analysis (with ‚ö° emoji)
   - Security Audit (with üîí emoji)
   - Cost Optimization (with üí∞ emoji)
   - Schema Analysis (with üìê emoji)
   - Convert markdown to HTML (headers, lists, code blocks, tables)
   - Syntax highlight code blocks with a dark theme

6. **Styling Requirements:**
   - Modern, professional design
   - Gradient backgrounds
   - Box shadows for depth
   - Hover effects on cards
   - Responsive design (mobile-friendly)
   - Beautiful typography (use system fonts)
   - Color scheme: Blues, purples, with accent colors for alerts
   - Code blocks with dark background and syntax highlighting
   - Tables with striped rows and borders

7. **Footer:**
   - Copyright notice
   - "Generated by MongoDB Atlas AI Ops Multi-Agent System"

8. **Important:**
   - Include Chart.js from CDN: <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
   - All CSS must be embedded in <style> tags
   - All JavaScript must be embedded in <script> tags
   - Parse the report content to extract health scores and violation counts
   - Make it print-friendly (with @media print styles)

Return ONLY the complete HTML code, nothing else. Start with <!DOCTYPE html> and end with </html>.
"""
            }
            
            return f"""To generate the HTML report, I need you to create a complete HTML file based on this markdown report.

{result['instructions']}

**Report Content:**
```markdown
{report_content[:10000]}...
```

**Project ID:** {project_id}

Please generate the complete HTML code now."""
            
        except Exception as e:
            return f"Error: Failed to read report: {str(e)}"

